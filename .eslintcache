[{"E:\\Project\\music-player-reactjs\\react-musicplayer\\src\\index.js":"1","E:\\Project\\music-player-reactjs\\react-musicplayer\\src\\App.js":"2","E:\\Project\\music-player-reactjs\\react-musicplayer\\src\\components\\Song.js":"3","E:\\Project\\music-player-reactjs\\react-musicplayer\\src\\components\\Player.js":"4","E:\\Project\\music-player-reactjs\\react-musicplayer\\src\\components\\Library.js":"5","E:\\Project\\music-player-reactjs\\react-musicplayer\\src\\components\\LibrarySongs.js":"6","E:\\Project\\music-player-reactjs\\react-musicplayer\\src\\components\\Librarysongs.js":"7","E:\\Project\\music-player-reactjs\\react-musicplayer\\src\\components\\Nav.js":"8","E:\\Project\\music-player-reactjs\\react-musicplayer\\src\\components\\data.js":"9","E:\\Project\\music-player-reactjs\\react-musicplayer\\src\\components\\util.js":"10"},{"size":201,"mtime":1612202352128,"results":"11","hashOfConfig":"12"},{"size":2952,"mtime":1612646894373,"results":"13","hashOfConfig":"12"},{"size":320,"mtime":1612461616639,"results":"14","hashOfConfig":"12"},{"size":3661,"mtime":1612645976131,"results":"15","hashOfConfig":"12"},{"size":884,"mtime":1612547440108,"results":"16","hashOfConfig":"12"},{"size":232,"mtime":1612467136316,"results":"17","hashOfConfig":"12"},{"size":1798,"mtime":1612563970334,"results":"18","hashOfConfig":"12"},{"size":452,"mtime":1612539153951,"results":"19","hashOfConfig":"12"},{"size":2214,"mtime":1612563975718,"results":"20","hashOfConfig":"12"},{"size":435,"mtime":1612564405092,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"yerna5",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"E:\\Project\\music-player-reactjs\\react-musicplayer\\src\\index.js",[],["44","45"],"E:\\Project\\music-player-reactjs\\react-musicplayer\\src\\App.js",[],"E:\\Project\\music-player-reactjs\\react-musicplayer\\src\\components\\Song.js",[],"E:\\Project\\music-player-reactjs\\react-musicplayer\\src\\components\\Player.js",["46"],"import React ,{useEffect} from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'  //\" {} means we are importing 1 specific thing froma file \"\r\nimport { faAngleLeft, faAngleRight, faPlay, faPause} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport const Player = (props) => {\r\n    //Event handleser\r\n    //ref\r\n    useEffect(()=>{\r\n\r\n \r\n        const newSong = props.songs.map((song)=>{\r\n            \r\n            \r\n            if(song.id===props.currentSong.id){\r\n\r\n                return{\r\n                    ...song,\r\n                    active:true,\r\n                }\r\n                \r\n            }else{\r\n                return{\r\n                    ...song,\r\n                    active:false,\r\n                }\r\n            }\r\n        \r\n\r\n        });\r\n     props.setsongs(newSong)\r\n    },[props.currentSong])\r\n\r\n\r\n    \r\n    \r\n    const playSongHandler=()=>{         \r\n        if(props.isPlaying){\r\n            \r\n            props.audioRef.current.pause();\r\n            props.setisPlaying(!props.isPlaying)\r\n\r\n        \r\n        }else \r\n        {\r\n        props.audioRef.current.play();        //audio.current.play in html \r\n        props.setisPlaying(!props.isPlaying)\r\n        }\r\n    }\r\n\r\n\r\n\r\n     \r\n\r\n\r\nconst converter=(time)=>{\r\n\r\n    return(\r\n        Math.floor(time/60)+ \":\"+(\"0\"+Math.floor(time%60)).slice(-2)  \r\n        \r\n    )\r\n    \r\n}\r\n\r\nconst skipTrackHandler=(direction)=>{           //play forward and backward\r\n    const currentIndex=props.songs.findIndex((song)=>song.id===props.currentSong.id)\r\n    console.log(currentIndex);\r\n    if(direction===\"skip-forward\")\r\n    {\r\n        props.setcurrentSong(props.songs[(currentIndex+1) % props.songs.length])\r\n      \r\n    }\r\n    if(direction===\"skip-back\")\r\n    {\r\n        if(((currentIndex- 1) % props.songs.length)=== -1)\r\n        {\r\n            props.setcurrentSong(props.songs[props.songs.length-1])  \r\n            // return;\r\n        }else {\r\n        props.setcurrentSong(props.songs[(currentIndex- 1) % props.songs.length])  \r\n        }\r\n\r\n\r\n    }\r\n}\r\n//styling\r\n\r\nlet anime={\r\n\r\n    transform:`translateX(${props.songInfo.animationPercentage}%)`\r\n}\r\n\r\n\r\n    return (\r\n        <div className=\"player\">\r\n            <div className=\"time-control \">\r\n            <p>{converter(props.songInfo.currentTime)}</p>\r\n\r\n\r\n            <div style={{background:`linear-gradient(to right, ${props.currentSong.color[0]},${props.currentSong.color[1]})`}} className=\"track\">\r\n            <input  type=\"range\"\r\n                min={0}     //starting time \r\n                 max={props.songInfo.durationTime|| 0 }        //\r\n                 value={props.songInfo.currentTime} \r\n                 onChange={props.DragHandleer}     //where ua pointer should be \r\n            \r\n            \r\n            /> \r\n            <div style={anime} className=\"animate-track\">\r\n\r\n</div>\r\n            </div>   \r\n\r\n\r\n\r\n            <p> {props.songInfo.durationTime?converter(props.songInfo.durationTime):\"00:00\"} </p>\r\n            </div>\r\n\r\n\r\n\r\n            <div className=\"play-control\">\r\n            <FontAwesomeIcon className=\"skip-back\"  onClick={()=>skipTrackHandler(\"skip-back\")} size=\"2x\" icon={faAngleLeft}/>  \r\n            <FontAwesomeIcon onClick={playSongHandler} className=\"play\" size=\"2x\" icon={props.isPlaying? faPause:faPlay}/>  \r\n           \r\n            <FontAwesomeIcon className=\"skip-forward\" onClick={()=>skipTrackHandler(\"skip-forward\")} size=\"2x\" icon={faAngleRight}/>  \r\n            </div>\r\n            \r\n            {/* <audio ref={audioRef} onTimeUpdate={timeupdateHandler} onLoadedMetadata={timeupdateHandler} src={props.currentSong.audio}/> */}\r\n        </div>\r\n    )\r\n}\r\n","E:\\Project\\music-player-reactjs\\react-musicplayer\\src\\components\\Library.js",[],"E:\\Project\\music-player-reactjs\\react-musicplayer\\src\\components\\LibrarySongs.js",[],"E:\\Project\\music-player-reactjs\\react-musicplayer\\src\\components\\Librarysongs.js",[],"E:\\Project\\music-player-reactjs\\react-musicplayer\\src\\components\\Nav.js",[],"E:\\Project\\music-player-reactjs\\react-musicplayer\\src\\components\\data.js",[],"E:\\Project\\music-player-reactjs\\react-musicplayer\\src\\components\\util.js",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":31,"column":7,"nodeType":"53","endLine":31,"endColumn":26,"suggestions":"54"},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["57"],"no-global-assign","no-unsafe-negation",{"desc":"58","fix":"59"},"Update the dependencies array to be: [props, props.currentSong]",{"range":"60","text":"61"},[823,842],"[props, props.currentSong]"]